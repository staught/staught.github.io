<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Select on staught</title>
    <link>https://staught.github.io/tags/select/</link>
    <description>Recent content in Select on staught</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Mon, 26 Nov 2018 20:49:27 +0800</lastBuildDate>
    
	<atom:link href="https://staught.github.io/tags/select/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go学习笔记09-select</title>
      <link>https://staught.github.io/blog/2018-11/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-select/</link>
      <pubDate>Mon, 26 Nov 2018 20:49:27 +0800</pubDate>
      
      <guid>https://staught.github.io/blog/2018-11/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-select/</guid>
      <description>什么是select？ select语句用于在多个发送/接收信道操作中进行选择。select语句会一直阻塞，直到发送/接收操作准备就绪。如果有多个信道操作准备完毕，select会随机地选取其中之一执行。该语法与switch类似，不同的是，这里的每个case语句都是信道操作。 select的应用 假设我们有一个关键性应用，需要尽快地把输出返回给用户。这个应用的数据复制并且存储在世界各地的服务器上。假设函数s</description>
    </item>
    
  </channel>
</rss>