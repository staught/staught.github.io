<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Error on staught</title>
    <link>https://staught.github.io/tags/error/</link>
    <description>Recent content in Error on staught</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Mon, 03 Dec 2018 09:42:46 +0800</lastBuildDate>
    
	<atom:link href="https://staught.github.io/tags/error/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go学习笔记14-panic和recover</title>
      <link>https://staught.github.io/blog/2018-12/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014-panic%E5%92%8Crecover/</link>
      <pubDate>Mon, 03 Dec 2018 09:42:46 +0800</pubDate>
      
      <guid>https://staught.github.io/blog/2018-12/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014-panic%E5%92%8Crecover/</guid>
      <description>什么是panic？ 在Go中，对于程序中出现的大部分异常情况，错误就已经够用了。但在有些情况下，当程序发生异常时无法继续运行，那么可使用panic来终止程序。 当函数发生panic时，它会终止运行，在执行完所有延迟函数后，程序控制返回到该函数的调用方。这样的过程会一直持续下去，直到当前协程的所有函数都返回退出，然后程序会打印出panic信息，接着打印出堆栈跟踪，最后程序终止。 何时应该使用panic？ 通</description>
    </item>
    
    <item>
      <title>Go学习笔记13-错误处理</title>
      <link>https://staught.github.io/blog/2018-11/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 30 Nov 2018 10:53:05 +0800</pubDate>
      
      <guid>https://staught.github.io/blog/2018-11/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>什么是错误 在Go中，错误一直是很常见的，错误用内建的error类型来表示。如果一个函数或方法需要返回错误，按照惯例，会作为最后一个值返回。在处理错误时，通常都是将返回的错误与nil比较。nil值表示没有错误发生，而非nil值表示出现了错误。 错误类型的表示 error是一个接口类型，定义如下。所有实现该接口的类型都可以当作一个错误类型。Error()方法给出了错误的描述。 type error interface { Error() string } 获取错误详细信息</description>
    </item>
    
  </channel>
</rss>