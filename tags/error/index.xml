<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Error on staught</title>
    <link>https://staught.github.io/tags/error/</link>
    <description>Recent content in Error on staught</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Fri, 30 Nov 2018 10:53:05 +0800</lastBuildDate>
    
	<atom:link href="https://staught.github.io/tags/error/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言拾记13-错误处理</title>
      <link>https://staught.github.io/blog/2018-11/go%E8%AF%AD%E8%A8%80%E6%8B%BE%E8%AE%B013-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 30 Nov 2018 10:53:05 +0800</pubDate>
      
      <guid>https://staught.github.io/blog/2018-11/go%E8%AF%AD%E8%A8%80%E6%8B%BE%E8%AE%B013-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>什么是错误 在Go中，错误一直是很常见的，错误用内建的error类型来表示。如果一个函数或方法需要返回错误，按照惯例，会作为最后一个值返回。在处理错误时，通常都是将返回的错误与nil比较。nil值表示没有错误发生，而非nil值表示出现了错误。 错误类型的表示 error是一个接口类型，定义如下。所有实现该接口的类型都可以当作一个错误类型。Error()方法给出了错误的描述。 type error interface { Error() string } 获取错误详细信息</description>
    </item>
    
  </channel>
</rss>