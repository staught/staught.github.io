<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Defer on staught</title>
    <link>https://staught.github.io/tags/defer/</link>
    <description>Recent content in Defer on staught</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Thu, 29 Nov 2018 10:17:10 +0800</lastBuildDate>
    
	<atom:link href="https://staught.github.io/tags/defer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go学习笔记12-defer</title>
      <link>https://staught.github.io/blog/2018-11/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012-defer/</link>
      <pubDate>Thu, 29 Nov 2018 10:17:10 +0800</pubDate>
      
      <guid>https://staught.github.io/blog/2018-11/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012-defer/</guid>
      <description>用途：含有defer语句的函数，会在该函数将要返回之前，调用另一个函数。 defer不仅限于函数的调用，调用方法也是合法的。 并非在调用延迟函数的时候才确定实参，而是当执行defer语句的时候，就会对延迟函数的实参进行求值： func printA(a int) { fmt.Println(a) } func main() { a := 5 defer printA(a) a = 10 fmt.Println(a) // output: /* 10 5 */ } 当一个函数内多次调用defer时，Go会把defer调用放入到一个栈中，随后按照后进先出的顺序执行。 当一个函数应该在与当前代码流无</description>
    </item>
    
  </channel>
</rss>