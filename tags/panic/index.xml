<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Panic on staught</title>
    <link>https://staught.github.io/tags/panic/</link>
    <description>Recent content in Panic on staught</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Mon, 03 Dec 2018 09:42:46 +0800</lastBuildDate>
    
	<atom:link href="https://staught.github.io/tags/panic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言拾记14-panic和recover</title>
      <link>https://staught.github.io/blog/2018-12/go%E8%AF%AD%E8%A8%80%E6%8B%BE%E8%AE%B014-panic%E5%92%8Crecover/</link>
      <pubDate>Mon, 03 Dec 2018 09:42:46 +0800</pubDate>
      
      <guid>https://staught.github.io/blog/2018-12/go%E8%AF%AD%E8%A8%80%E6%8B%BE%E8%AE%B014-panic%E5%92%8Crecover/</guid>
      <description>什么是panic？ 在Go中，对于程序中出现的大部分异常情况，错误就已经够用了。但在有些情况下，当程序发生异常时无法继续运行，那么可使用panic来终止程序。 当函数发生panic时，它会终止运行，在执行完所有延迟函数后，程序控制返回到该函数的调用方。这样的过程会一直持续下去，直到当前协程的所有函数都返回退出，然后程序会打印出panic信息，接着打印出堆栈跟踪，最后程序终止。 何时应该使用panic？ 通</description>
    </item>
    
  </channel>
</rss>